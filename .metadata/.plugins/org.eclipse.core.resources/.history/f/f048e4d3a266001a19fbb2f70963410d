package lc273.integerToWords;

import java.util.HashMap;

class Solution {
	private HashMap<Integer, String> belowHundredMap = new HashMap<Integer, String>();
	private HashMap<Integer, String> belowTwentyMap = new HashMap<Integer, String>();
	private final String[] belowTwenty = new String[] { "", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight",
			"Nine","Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen",
			"Sixteen", "Seventeen", "Eighteen", "Nineteen" };
	private final String[] belowHundred = new String[] { "", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty",
			"Seventy", "Eighty", "Ninety" };

	Solution() {
		int i=0;
		for(int j=0;j<belowTwenty.length;++j){
			belowTwentyMap.put(i++, belowTwenty[j]);
		}
		i=0;
		for(int j=0;j<belowHundred.length;++j){
			belowHundredMap.put(i++, belowHundred[j]);
		}
	}

	public String numberToWords(int num) {

		String word = auxGetWords(num);
		System.out.println(word);
		return word;
	}

	private String auxGetWords(int num) {
		String word="";
		String snum=num+"";
		String slastTwo=snum.substring(1);
		
		int lastTwo=Integer.parseInt(slastTwo);
		String s1;
		if(lastTwo<20){
		s1=belowTwentyMap.get(lastTwo);
		}
		else{
			s1=auxGetWords(lastTwo);
		  
		}
		String sthird=snum.substring(0,1);
		int third=Integer.parseInt(sthird);
		String s2=belowTwentyMap.get(third);
		if(s2.length()>0){
			s2=s2+" "+"Hundred";
		}
		word=s2+" "+s1;
		return word.trim();
	}	
}